#ifndef COMPILER_HPP
#define COMPILER_HPP

#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <unordered_map>

using namespace std;

unordered_map<string, string> opcode = {
    {"add", "0110011"},
    {"sub", "0110011"},
    {"xor", "0110011"},
    {"or" , "0110011"},
    {"and", "0110011"},
    {"sll", "0110011"},
    {"srl", "0110011"},
    {"sra", "0110011"},
    {"slt", "0110011"},
    {"sltu","0110011"}
};

unordered_map<string, string> funct3 = {
    {"add", "000"},
    {"sub", "000"},
    {"xor", "100"},
    {"or" , "110"},
    {"and", "111"},
    {"sll", "001"},
    {"srl", "101"},
    {"sra", "101"},
    {"slt", "010"},
    {"sltu", "011"}
};

unordered_map<string, string> funct7 = {
    {"add", "0000000"},
    {"sub", "0100000"},
    {"srl", "0000000"},
    {"sra", "0100000"}
};

unordered_map<string, string> registers = {
    {"zero", "00000"}, {"x0", "00000"},
    {"ra", "00001"}, {"x1", "00001"},
    {"sp", "00010"}, {"x2", "00010"},
    {"gp", "00011"}, {"x3", "00011"},
    {"tp", "00100"}, {"x4", "00100"},
    {"t0", "00101"}, {"x5", "00101"},
    {"t1", "00110"}, {"x6", "00110"},
    {"t2", "00111"}, {"x7", "00111"},
    {"s0", "01000"}, {"x8", "01000"},
    {"s1", "01001"}, {"x9", "01001"},
    {"a0", "01010"}, {"x10", "01010"},
    {"a1", "01011"}, {"x11", "01011"},
    {"a2", "01100"}, {"x12", "01100"},
    {"a3", "01101"}, {"x13", "01101"},
    {"a4", "01110"}, {"x14", "01110"},
    {"a5", "01111"}, {"x15", "01111"},
    {"a6", "10000"}, {"x16", "10000"},
    {"a7", "10001"}, {"x17", "10001"},
    {"s2", "10010"}, {"x18", "10010"},
    {"s3", "10011"}, {"x19", "10011"},
    {"s4", "10100"}, {"x20", "10100"},
    {"s5", "10101"}, {"x21", "10101"},
    {"s6", "10110"}, {"x22", "10110"},
    {"s7", "10111"}, {"x23", "10111"},
    {"s8", "11000"}, {"x24", "11000"},
    {"s9", "11001"}, {"x25", "11001"},
    {"s10", "11010"}, {"x26", "11010"},
    {"s11", "11011"}, {"x27", "11011"},
    {"t3", "11100"}, {"x28", "11100"},
    {"t4", "11101"}, {"x29", "11101"},
    {"t5", "11110"}, {"x30", "11110"},
    {"t6", "11111"}, {"x31", "11111"}
};

string trim(const string& str);

vector<string> parse(string line);

bool isWanted(char c);

string cleanToken(string token);

string compileLine(vector<string> tokens);

#endif